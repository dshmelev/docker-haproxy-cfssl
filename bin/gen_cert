#!/usr/bin/env ruby
require 'json'
require 'base64'
require 'net/http'
require 'openssl'
require 'uri'

@cert_path = File.expand_path "#{File.dirname(__FILE__)}/../certs"
@shared_key = ENV.fetch 'CFSSL_SHARED_KEY'
@server     = ENV['CFSSL_CA_HOST']
@profile = 'httpclient'
@hostname = ["dockerhost"]
@subject = {}
@subject['names'] = [
  {
    'C' => 'GB',
    'L' => 'London',
    'O' => 'Onetwotrip Travel Agency LLP',
    'OU' => 'DockerProxy',
  },
]

def cert
  uri = make_uri(sign_method)
  @cert ||= cfssl_request(uri, body)['result']['certificate'].chomp ||
            Chef::Log.error("Unable to get cert from #{uri}")
end

def ca
  uri = make_uri('info')
  @ca ||= cfssl_request(uri, { label: @profile }.to_json)['result']['certificate'].chomp ||
          Chef::Log.error("Unable to get ca from #{uri}")
end

def cfssl_request(uri, request_body)
  req = Net::HTTP::Post.new(uri, 'Content-Type' => 'application/json')
  req.body = request_body
  res = Net::HTTP.start(uri.hostname, uri.port,
                        use_ssl: uri.scheme == 'https').request(req)
  JSON.parse res.body
end

def make_uri(method)
  URI("#{@server}/api/v1/cfssl/#{method}")
end

def sign_method
  @shared_key ? 'authsign' : 'sign'
end

def body
  body = {
    'certificate_request' => csr,
    'profile' => @profile,
    'subject' => @subject }
  body['hosts'] = @hostname
  body = encrypt(body.to_json) if @shared_key
  body.to_json
end

def encrypt(plain_body)
  token = OpenSSL::HMAC.digest(digest, decoded_shared_key, plain_body)
  { token: Base64.encode64(token), request: Base64.encode64(plain_body) }
end

def key
  @key ||= OpenSSL::PKey::RSA.new 2048
end

def host_interfaces
  node['network']['interfaces'].select do |_iface_name, data|
    data['addresses']
  end
end

def host_addresses
  addresses = host_interfaces.map do |_name, settings|
    settings['addresses'].keys.select { |k| k.match('\.') }
  end
  addresses.flatten!
end

def csr
  request = OpenSSL::X509::Request.new
  request.public_key = key.public_key
  request.sign key, OpenSSL::Digest::SHA256.new
  request.to_pem
end

def digest
  OpenSSL::Digest.new('sha256')
end

def decoded_shared_key
  return nil unless @shared_key
  @shared_key.scan(/../).map { |x| x.hex.chr }.join
end

File.write("#{@cert_path}/bundle.pem", [cert, key.to_pem].join("\n"))
File.write("#{@cert_path}/ca.pem" ,    ca)
